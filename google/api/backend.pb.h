// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/backend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fbackend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fbackend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fbackend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fbackend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fbackend_2eproto;
namespace google {
namespace api {
class Backend;
class BackendDefaultTypeInternal;
extern BackendDefaultTypeInternal _Backend_default_instance_;
class BackendRule;
class BackendRuleDefaultTypeInternal;
extern BackendRuleDefaultTypeInternal _BackendRule_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Backend* Arena::CreateMaybeMessage<::google::api::Backend>(Arena*);
template<> ::google::api::BackendRule* Arena::CreateMaybeMessage<::google::api::BackendRule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Backend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Backend) */ {
 public:
  inline Backend() : Backend(nullptr) {}
  virtual ~Backend();

  Backend(const Backend& from);
  Backend(Backend&& from) noexcept
    : Backend() {
    *this = ::std::move(from);
  }

  inline Backend& operator=(const Backend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Backend& operator=(Backend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Backend& default_instance();

  static inline const Backend* internal_default_instance() {
    return reinterpret_cast<const Backend*>(
               &_Backend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Backend& a, Backend& b) {
    a.Swap(&b);
  }
  inline void Swap(Backend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Backend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Backend* New() const final {
    return CreateMaybeMessage<Backend>(nullptr);
  }

  Backend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Backend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Backend& from);
  void MergeFrom(const Backend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Backend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Backend";
  }
  protected:
  explicit Backend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fbackend_2eproto);
    return ::descriptor_table_google_2fapi_2fbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .google.api.BackendRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::google::api::BackendRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::BackendRule >*
      mutable_rules();
  private:
  const ::google::api::BackendRule& _internal_rules(int index) const;
  ::google::api::BackendRule* _internal_add_rules();
  public:
  const ::google::api::BackendRule& rules(int index) const;
  ::google::api::BackendRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::BackendRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.api.Backend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::BackendRule > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fbackend_2eproto;
};
// -------------------------------------------------------------------

class BackendRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.BackendRule) */ {
 public:
  inline BackendRule() : BackendRule(nullptr) {}
  virtual ~BackendRule();

  BackendRule(const BackendRule& from);
  BackendRule(BackendRule&& from) noexcept
    : BackendRule() {
    *this = ::std::move(from);
  }

  inline BackendRule& operator=(const BackendRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackendRule& operator=(BackendRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BackendRule& default_instance();

  static inline const BackendRule* internal_default_instance() {
    return reinterpret_cast<const BackendRule*>(
               &_BackendRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackendRule& a, BackendRule& b) {
    a.Swap(&b);
  }
  inline void Swap(BackendRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackendRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackendRule* New() const final {
    return CreateMaybeMessage<BackendRule>(nullptr);
  }

  BackendRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackendRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BackendRule& from);
  void MergeFrom(const BackendRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackendRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.BackendRule";
  }
  protected:
  explicit BackendRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fbackend_2eproto);
    return ::descriptor_table_google_2fapi_2fbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectorFieldNumber = 1,
    kAddressFieldNumber = 2,
    kDeadlineFieldNumber = 3,
    kMinDeadlineFieldNumber = 4,
  };
  // string selector = 1;
  void clear_selector();
  const std::string& selector() const;
  void set_selector(const std::string& value);
  void set_selector(std::string&& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  std::string* mutable_selector();
  std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  private:
  const std::string& _internal_selector() const;
  void _internal_set_selector(const std::string& value);
  std::string* _internal_mutable_selector();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // double deadline = 3;
  void clear_deadline();
  double deadline() const;
  void set_deadline(double value);
  private:
  double _internal_deadline() const;
  void _internal_set_deadline(double value);
  public:

  // double min_deadline = 4;
  void clear_min_deadline();
  double min_deadline() const;
  void set_min_deadline(double value);
  private:
  double _internal_min_deadline() const;
  void _internal_set_min_deadline(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.BackendRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  double deadline_;
  double min_deadline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fbackend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Backend

// repeated .google.api.BackendRule rules = 1;
inline int Backend::_internal_rules_size() const {
  return rules_.size();
}
inline int Backend::rules_size() const {
  return _internal_rules_size();
}
inline void Backend::clear_rules() {
  rules_.Clear();
}
inline ::google::api::BackendRule* Backend::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Backend.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::BackendRule >*
Backend::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Backend.rules)
  return &rules_;
}
inline const ::google::api::BackendRule& Backend::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::google::api::BackendRule& Backend::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Backend.rules)
  return _internal_rules(index);
}
inline ::google::api::BackendRule* Backend::_internal_add_rules() {
  return rules_.Add();
}
inline ::google::api::BackendRule* Backend::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Backend.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::BackendRule >&
Backend::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Backend.rules)
  return rules_;
}

// -------------------------------------------------------------------

// BackendRule

// string selector = 1;
inline void BackendRule::clear_selector() {
  selector_.ClearToEmpty();
}
inline const std::string& BackendRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.selector)
  return _internal_selector();
}
inline void BackendRule::set_selector(const std::string& value) {
  _internal_set_selector(value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.selector)
}
inline std::string* BackendRule::mutable_selector() {
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.selector)
  return _internal_mutable_selector();
}
inline const std::string& BackendRule::_internal_selector() const {
  return selector_.Get();
}
inline void BackendRule::_internal_set_selector(const std::string& value) {
  
  selector_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BackendRule::set_selector(std::string&& value) {
  
  selector_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.BackendRule.selector)
}
inline void BackendRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selector_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.selector)
}
inline void BackendRule::set_selector(const char* value,
    size_t size) {
  
  selector_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.selector)
}
inline std::string* BackendRule::_internal_mutable_selector() {
  
  return selector_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BackendRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.selector)
  return selector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BackendRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.selector)
}

// string address = 2;
inline void BackendRule::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& BackendRule::address() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.address)
  return _internal_address();
}
inline void BackendRule::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.address)
}
inline std::string* BackendRule::mutable_address() {
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.address)
  return _internal_mutable_address();
}
inline const std::string& BackendRule::_internal_address() const {
  return address_.Get();
}
inline void BackendRule::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BackendRule::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.BackendRule.address)
}
inline void BackendRule::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.address)
}
inline void BackendRule::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.address)
}
inline std::string* BackendRule::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BackendRule::release_address() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BackendRule::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.address)
}

// double deadline = 3;
inline void BackendRule::clear_deadline() {
  deadline_ = 0;
}
inline double BackendRule::_internal_deadline() const {
  return deadline_;
}
inline double BackendRule::deadline() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.deadline)
  return _internal_deadline();
}
inline void BackendRule::_internal_set_deadline(double value) {
  
  deadline_ = value;
}
inline void BackendRule::set_deadline(double value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.deadline)
}

// double min_deadline = 4;
inline void BackendRule::clear_min_deadline() {
  min_deadline_ = 0;
}
inline double BackendRule::_internal_min_deadline() const {
  return min_deadline_;
}
inline double BackendRule::min_deadline() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.min_deadline)
  return _internal_min_deadline();
}
inline void BackendRule::_internal_set_min_deadline(double value) {
  
  min_deadline_ = value;
}
inline void BackendRule::set_min_deadline(double value) {
  _internal_set_min_deadline(value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.min_deadline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fbackend_2eproto
